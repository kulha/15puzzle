{"version":3,"sources":["index.js"],"names":["Game","props","_this","Object","D_work_react_react02_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","D_work_react_react02_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","D_work_react_react02_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","boardRef","React","createRef","state","size","_this2","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","className","type","value","onChange","evt","updateInputValue","onClick","shuffle","Board","ref","current","fillData","val","target","isNaN","setState","parseInt","Component","_this3","_this4","console","log","timerRef","setInterval","secondsElapsed","arr","Array","fill","map","num","i","sort","Math","random","empty","indexOf","retVal","squares","moves","startTime","total","length","percentSolved","floor","isSolved","seconds","Date","getTime","_this5","_this$calculateSoluti","calculateSolution","slice","clearInterval","rows","D_work_react_react02_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","BoardRow","elementsArray","elementCount","key","moveSquareOnClick","onKeyDown","keyCode","moveSquareOnKeyPress","minutesElapsed","remainingSeconds","Fragment","disabled","undo","lastMove","undoKeyCode","isUndo","isUpdated","oldNum","pop","push","isMoveValid","oldEmpty","oldValue","Square","_this6","row","renderSquare","_this7","input","nameInput","focus","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eff932e0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.boardRef = React.createRef();\r\n        this.state = {\r\n            size: 4\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"game\">\r\n                <div>\r\n                    <input type=\"text\" value={this.state.size} onChange={evt => this.updateInputValue(evt)} />\r\n                </div><br />\r\n                <button onClick={() => this.shuffle()}>Shuffle</button>\r\n                <div className=\"game-board\">\r\n                    <Board ref={this.boardRef} size={this.state.size} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    shuffle() {\r\n        this.boardRef.current.fillData(this.state.size);\r\n    }\r\n    updateInputValue(evt) {\r\n        let val = evt.target.value;\r\n        if (val === \"\" || isNaN(val)) return true;\r\n        this.boardRef.current.fillData(val);\r\n        this.setState({\r\n            size: parseInt(val, 10)\r\n        });\r\n    }\r\n}\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = this.fillData(this.props.size);\r\n    }\r\n    fillData(size) {\r\n        console.log(\"filling data of size \" + size);\r\n        let timerRef = setInterval(()=>this.setState({secondsElapsed:this.secondsElapsed()}) ,1000);\r\n        let arr = Array((size * size)).fill(null);\r\n        arr = arr.map((num, i) => i + 1);\r\n        // shuffle arr\r\n        arr.sort(function () { return 0.5 - Math.random() });\r\n        let empty = arr.indexOf(size * size);\r\n        arr[empty] = null;\r\n        let retVal = {\r\n            size: size,\r\n            squares: arr,\r\n            empty: empty,\r\n            moves: [],\r\n            startTime: null,\r\n            secondsElapsed:0,\r\n            timerRef:timerRef\r\n        };\r\n        this.setState(retVal);\r\n        return retVal;\r\n    }\r\n    calculateSolution(arr) {\r\n        let total = 0;\r\n        for (var i = 0; i < arr.length; i++) {\r\n            let val = arr[i] ? arr[i] : 0;\r\n            // console.log(total, val, i);\r\n            total += ((i + 1) === val ? 1 : 0);\r\n        }\r\n        // console.log(\"solved \", total * 100 / (this.state.size * this.state.size));\r\n        let percentSolved = Math.floor(total * 100 / ((this.state.size * this.state.size) - 1));\r\n\r\n        return ({\r\n            percentSolved: percentSolved,\r\n            isSolved: percentSolved === 100\r\n        });\r\n    }\r\n    secondsElapsed(){\r\n        let startTime = this.state.startTime;\r\n        if(!startTime)return 0;\r\n        let nowTime = new Date();\r\n        let seconds = (nowTime.getTime() - startTime.getTime())/1000;\r\n        return Math.floor(seconds);\r\n    }\r\n    render() {\r\n        console.log(\"Start Rendering Board...\");\r\n        let { percentSolved, isSolved } = this.calculateSolution(this.state.squares.slice());\r\n        if(isSolved)clearInterval(this.state.timerRef);\r\n        // console.log(\"Solved %\", percentSolved, isSolved);\r\n        // this.setState({squares: this.fillData(this.props.size)});\r\n        let rows = [...Array(this.props.size)].map((num, i) => {\r\n            return (<BoardRow\r\n                elementsArray={this.state.squares.slice(i * this.props.size, (i + 1) * this.props.size)}\r\n                elementCount={this.props.size}\r\n                key={i}\r\n                onClick={(num) => this.moveSquareOnClick(num)}\r\n                onKeyDown={(keyCode) => this.moveSquareOnKeyPress(keyCode)}\r\n            />\r\n            );\r\n        }\r\n        );\r\n        let minutesElapsed = Math.floor(this.state.secondsElapsed/60);\r\n        let remainingSeconds =  this.state.secondsElapsed - (minutesElapsed*60);\r\n        // console.log(rows);\r\n        return (\r\n            <>\r\n                <div>\r\n                    {rows}\r\n                </div>\r\n                <div>\r\n                    {this.state.moves.length} moves\r\n                </div>\r\n                <div>\r\n                    <button disabled={this.state.moves.length === 0} onClick={() => this.undo()}>Undo</button>\r\n                </div>\r\n                <div>\r\n                    {percentSolved}% solved\r\n                </div>\r\n                <div>\r\n                    {minutesElapsed} min {remainingSeconds} sec elapsed\r\n                </div>\r\n                <div>\r\n                    {isSolved ? \"You WON!!!\" : \"\"}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n    undo() {\r\n        let moves = this.state.moves.slice();\r\n        let lastMove = moves[moves.length - 1];\r\n        console.log(\"lastMove\", lastMove);\r\n        let undoKeyCode = 0;\r\n        switch (lastMove) {\r\n            case 37:\r\n                //  alert('Left key pressed');\r\n                undoKeyCode = 39;\r\n                break;\r\n            case 38:\r\n                //  alert('Up key pressed');\r\n                undoKeyCode = 40;\r\n                break;\r\n            case 39:\r\n                //  alert('Right key pressed');\r\n                undoKeyCode = 37;\r\n                break;\r\n            case 40:\r\n                //  alert('Down key pressed');\r\n                undoKeyCode = 38;\r\n                break;\r\n            default: break;\r\n        }\r\n        //  moves.pop();\r\n        //  this.setState({moves:moves});\r\n        this.moveSquareOnKeyPress(undoKeyCode, true);\r\n    }\r\n    moveSquareOnKeyPress(keyCode, isUndo) {\r\n        let squares = this.state.squares.slice();\r\n        let moves = this.state.moves.slice();\r\n        console.log(moves, this.state.moves);\r\n        let empty = this.state.empty;\r\n        let isUpdated = false;\r\n        console.log(empty);\r\n        switch (keyCode) {\r\n            case 37:\r\n                console.log('Left key pressed');\r\n                // same row -1\r\n                if (empty % this.state.size < this.state.size - 1) {\r\n                    console.log(\"move allowed\");\r\n                    let oldNum = squares[empty + 1];\r\n                    squares[empty + 1] = null;\r\n                    squares[empty] = oldNum;\r\n                    empty++;\r\n                    isUpdated = true;\r\n                }\r\n                else\r\n                    console.log(\"move not allowed\");\r\n                break;\r\n            case 38:\r\n                console.log('Up key pressed');\r\n                // same col -1\r\n                if (Math.floor(empty / this.state.size) < this.state.size - 1) {\r\n                    console.log(\"move allowed\");\r\n                    let oldNum = squares[empty + this.state.size];\r\n                    squares[empty + this.state.size] = null;\r\n                    squares[empty] = oldNum;\r\n                    empty += this.state.size;\r\n                    isUpdated = true;\r\n                }\r\n                else\r\n                    console.log(\"move not allowed\");\r\n                break;\r\n            case 39:\r\n                console.log('Right key pressed');\r\n                //same row +1\r\n                if (empty % this.state.size > 0) {\r\n                    console.log(\"move allowed\");\r\n                    let oldNum = squares[empty - 1];\r\n                    squares[empty - 1] = null;\r\n                    squares[empty] = oldNum;\r\n                    empty--;\r\n                    isUpdated = true;\r\n                }\r\n                else\r\n                    console.log(\"move not allowed\");\r\n                break;\r\n            case 40:\r\n                console.log('Down key pressed');\r\n                //same col +1\r\n                if (Math.floor(empty / this.state.size) > 0) {\r\n                    console.log(\"move allowed\");\r\n                    let oldNum = squares[empty - this.state.size];\r\n                    squares[empty - this.state.size] = null;\r\n                    squares[empty] = oldNum;\r\n                    empty -= this.state.size;\r\n                    isUpdated = true;\r\n                }\r\n                else\r\n                    console.log(\"move not allowed\");\r\n                break;\r\n            default: return;\r\n        }\r\n        if (isUpdated) {\r\n            if (!isUndo) {\r\n                if (keyCode >= 37 && keyCode <= 40) {\r\n                    moves.push(keyCode);\r\n                    if(!this.state.startTime)this.setState({startTime:new Date()})\r\n                }\r\n            }\r\n            else moves.pop();\r\n            this.setState({ empty: empty, squares: squares, moves: moves });\r\n        }\r\n    }\r\n    moveSquareOnClick(i) { // position\r\n        i = this.state.squares.indexOf(i);\r\n        let moves = this.state.moves.slice();\r\n        console.log(\"Now empty at \" + this.state.empty);\r\n        console.log(\"clicked \" + i);\r\n        let isMoveValid = false;\r\n        let keyCode = 0;\r\n        // check same row\r\n        if (Math.floor(i / this.props.size) === Math.floor(this.state.empty / this.props.size)) {\r\n            if ((i + 1) === this.state.empty) {\r\n                keyCode = 39;\r\n            }\r\n            else if (i - 1 === this.state.empty) {\r\n                keyCode = 37;\r\n            }\r\n            isMoveValid = true;\r\n        }\r\n        // check same col\r\n        else if ((i) % this.props.size === (this.state.empty) % this.props.size) {\r\n            if ((i + this.props.size) === this.state.empty) {\r\n                keyCode = 40;\r\n            }\r\n            else if (i - this.props.size === this.state.empty) {\r\n                keyCode = 38;\r\n            }\r\n            isMoveValid = true;\r\n        }\r\n        if (isMoveValid) {\r\n            console.log(\"Moving \" + i + \" to \" + this.state.empty);\r\n            let oldEmpty = this.state.empty;\r\n            let arr = this.state.squares;\r\n            let oldValue = arr[i];\r\n            arr[i] = null;\r\n            arr[oldEmpty] = oldValue;\r\n            if (keyCode >= 37 && keyCode <= 40) moves.push(keyCode);\r\n            this.setState({ empty: i, squares: arr, moves: moves });\r\n            if(!this.state.startTime)this.setState({startTime:new Date()})\r\n        }\r\n    }\r\n}\r\nclass BoardRow extends React.Component {\r\n    renderSquare(i) {\r\n        return (\r\n            <Square\r\n                num={this.props.elementsArray[i]}\r\n                onClick={this.props.onClick}\r\n                key={i}\r\n                onKeyDown={this.props.onKeyDown}\r\n            />\r\n        );\r\n    }\r\n    render() {\r\n        var row = [...Array(this.props.elementCount)].map((num, i) => this.renderSquare(i));\r\n        // console.log(row);\r\n        return (<div className=\"board-row\">{row}</div>);\r\n    }\r\n\r\n}\r\nclass Square extends React.Component {\r\n    render() {\r\n        return (\r\n            <button\r\n                ref={(input) => { this.nameInput = input; }}\r\n                className=\"square\"\r\n                onClick={() => this.props.onClick(this.props.num)}\r\n                onKeyDown={(evt) => this.props.onKeyDown(evt.keyCode)}\r\n            >\r\n                {this.props.num}\r\n            </button>\r\n        );\r\n    }\r\n    handleKeyDown(evt) {\r\n        let keyCode = evt.keyCode;\r\n        console.log(keyCode);\r\n    }\r\n    componentDidMount() {\r\n        if (!this.props.num) this.nameInput.focus();\r\n    }\r\n}\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}